name: CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'  # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    # Removed inputs for simplicity - manual run will only build and inspect for now
    inputs:
      publish_target:
        description: 'Set to "pypi" to publish to PyPI, or "inspect" to build and list wheel contents. Default is "none".'
        required: false
        default: 'none' # Default to NOT publishing

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    env:
      SKIP_E2E_TESTS: "true"

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        cd backend
        pip install poetry
        poetry install
    - name: Run tests
      run: |
        cd backend
        poetry run pytest --cov=planaieditor --cov-branch --cov-report=xml
    - name: Comment PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: '✅ Tests passed for Python ${{ matrix.python-version }}!'
          })
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      if: matrix.python-version == '3.10'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        cd backend
        pip install poetry
        poetry install --with dev
    - name: Run linters
      run: |
        cd backend
        poetry run flake8 .
        poetry run black --check .
    - name: Comment PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: '✅ Linting passed!'
          })

  publish:
    name: Build and Publish/Inspect
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.publish_target == 'pypi' || github.event.inputs.publish_target == 'inspect'))
    steps:
    - uses: actions/checkout@v4
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Install and build frontend
      run: |
        cd frontend
        npm install
        npm run build
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        cd backend
        pip install poetry
    - name: Copy Frontend Assets to Backend Package
      run: |
        echo "Copying frontend build assets..."
        # Define paths relative to the repo root
        FRONTEND_BUILD_DIR="frontend/build"
        BACKEND_TARGET_DIR="backend/planaieditor/static_frontend"
        # Ensure target parent directory exists (it should, but belt-and-suspenders)
        mkdir -p $(dirname "$BACKEND_TARGET_DIR")
        # Remove existing target directory if it exists (clean copy)
        rm -rf "$BACKEND_TARGET_DIR"
        # Copy the frontend build output
        cp -rp "$FRONTEND_BUILD_DIR" "$BACKEND_TARGET_DIR"
        echo "Frontend assets copied."
    - name: Build and Publish/Inspect Package
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      run: |
        cd backend
        # Build first
        poetry build
        # Then check what to do next
        if [[ "${{ github.event.inputs.publish_target }}" == "inspect" ]]; then
          echo "--- Inspecting wheel file contents: ---"
          unzip -l dist/*.whl || echo "Wheel file not found or unzip failed."
        elif [[ "${{ github.event.inputs.publish_target }}" == "pypi" || "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
          # Publish only if triggered by tag OR manually targeted to 'pypi'
          echo "Publishing to PyPI..."
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish
        fi
