---
description:
globs: *.ts,*.svelte
alwaysApply: false
---

# We are writing Svelte 5 code

- We make use of Svelte 5 runes: $state, $derived, and $effect
- We employ universal reactivity with .svelte.js files rather than using stores
- We use typescript instead of javascript
- We use Svelte 5 snippets instead of Svelte 5 slots
- createEventDispatcher() is obsolete; use $props() instead
- We use phosphor ui for icons
- We are using tailwindcss v4 for styles
  - background opacity is now specified as follows: bg-gray-900/50 because bg-opacity-50 has been deprecated.
- SvelteComponent, the base class from Svelte 4, is deprecated in favour of the new Component type which defines the function shape of a Svelte component.

# UI Component Library
- We are using the headless bits UI component library
- When using a CSS framework like [TailwindCSS](mdc:planaieditor/planaieditor/planaieditor/planaieditor/planaieditor/planaieditor/planaieditor/planaieditor/planaieditor/planaieditor/planaieditor/planaieditor/planaieditor/https:/tailwindcss.com), simply pass the classes to the component:

```svelte
<script lang="ts">
 import { Accordion } from "bits-ui";
</script>
<Accordion.Trigger class="h-12 w-full bg-blue-500 hover:bg-blue-600">Click me</Accordion.Trigger>
```

# Svelte Flow Reactivity
 - Node data changes do not lead to reactivity, e.g.

```svelte
let someData: number = $state(1);

$effect(() => {
  number = data.nodeNumber;
})
```

The effect above will never be executed. However, node data can be successfully synced the other way:

```svelte
let someData: number = $state(1);

$effect(() => {
  data.nodeNumber = number;
})
```

 - Effects should be avoided if they are not strictly necessary. Instead use callbacks or $derived or $derived.by()

# Dealing with Monaco Editor and Monaco Language Client
We are using Svelte 5, Vite and Sveltekit which make extensive use of SSR. That means that any imports related to monaco need to be done dynamically, e.g.

```svelte
console.log('Initializing VSCode services...');
const { initServices } = await import('monaco-languageclient/vscode/services');
await initServices({});
```
