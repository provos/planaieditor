---
description: 
globs: 
alwaysApply: false
---
## Svelte-Splitpanes: Best Practices Manual

`svelte-splitpanes` is a powerful Svelte component for creating resizable pane layouts. Here's how to make the most of it:

### 1. Basic Setup

The core of the library consists of two main components: `<Splitpanes>` (the container) and `<Pane>` (the individual resizable sections).

A minimal setup looks like this:

```svelte
<script>
  import { Pane, Splitpanes } from 'svelte-splitpanes';
</script>

<Splitpanes style="height: 400px">
  <Pane>
    <div>Pane 1 Content</div>
  </Pane>
  <Pane>
    <div>Pane 2 Content</div>
  </Pane>
</Splitpanes>
```
This will create a vertical split by default. Always ensure your `<Splitpanes>` container has a defined height (or width, for horizontal layouts) for proper rendering.

---
### 2. Configuring `<Splitpanes>`

The `<Splitpanes>` component offers several props to customize its behavior:

* **`horizontal`**: (Boolean, default: `false`)
    * Set to `true` for a horizontal layout (panes stack vertically, splitters are horizontal).
    * Example: `<Splitpanes horizontal style="height: 300px">` 
* **`pushOtherPanes`**: (Boolean, default: `true`)
    * When `true`, dragging a splitter can push other splitters and resize adjacent panes beyond the immediate ones.
    * Set to `false` to lock the layout, meaning a splitter will only resize its direct neighbors and stop at their boundaries.
* **`dblClickSplitter`**: (Boolean, default: `true`)
    * Allows users to double-click a splitter to maximize the next pane.
    * Set to `false` to disable this feature.
* **`rtl`**: (Boolean | "auto", default: `"auto"`)
    * Enables Right-To-Left layout. `"auto"` will attempt to detect the direction from the computed style of the container.
* **`firstSplitter`**: (Boolean, default: `false`)
    * Set to `true` to display a splitter before the first pane. This allows maximizing the first pane via double-click but doesn't allow resizing it.
    * Example: `<Splitpanes {firstSplitter} {horizontal}>` 
* **`theme`**: (String, default: `'default-theme'`)
    * Apply a CSS class for styling the splitters. You can create custom themes.
    * Examples: `theme="no-splitter"`, `theme="modern-theme"`, `theme="my-theme"` 
* **`class`**: (String)
    * Add any additional CSS classes to the `<Splitpanes>` component.
* **`style`**: (String)
    * Apply inline styles, commonly used to set the height or width of the container.

---
### 3. Configuring `<Pane>`

Each `<Pane>` can be configured with the following props:

* **`size`**: (Number | null, default: `null`)
    * Sets the initial size of the pane in percentage.
    * If all panes have a `size` defined, their sum should ideally be 100.
    * If some panes have `size` and others don't, the remaining space is distributed among those without a defined size.
    * If no panes have a `size`, they will be distributed equally.
    * Can be two-way bound: `bind:size={paneSize}` for programmatic resizing.
* **`minSize`**: (Number, default: `0`)
    * Sets the minimum size of the pane in percentage.
    * Example: `<Pane minSize={20}>` 
* **`maxSize`**: (Number, default: `100`)
    * Sets the maximum size of the pane in percentage.
    * Example: `<Pane maxSize={70}>` 
* **`snapSize`**: (Number, default: `0`)
    * Defines a snap value in percentage. When resizing, if the pane's size gets close to its `minSize` plus `snapSize` (or `maxSize` minus `snapSize`), it can snap to that boundary.
    * Example: `<Pane snapSize={10}>` 
* **`class`**: (String)
    * Add any additional CSS classes to the `<Pane>` component.

---
### 4. Layout Management
* **Initial Sizes**: For a predictable initial layout, provide `size` props for your panes. Ensure the total percentage adds up to 100 for best results. If you omit `size` for one or more panes, they will share the remaining space. If all panes omit `size`, they will be divided equally.
    ```svelte
    <Splitpanes horizontal style="height: 400px">
      <Pane size={65}>65%</Pane>
      <Pane size={10}>10%</Pane>
      <Pane size={25}>25%</Pane>
    </Splitpanes>
    ```
* **Programmatic Resizing**: Use two-way binding with the `size` prop on a `<Pane>` to control its dimensions programmatically.
    ```svelte
    <script>
      let pane1Size = 30;
    </script>
    <Splitpanes>
      <Pane bind:size={pane1Size}>Dynamic Pane</Pane>
      <Pane>Second Pane</Pane>
    </Splitpanes>
    <input type="range" bind:value={pane1Size} min="10" max="90" />
    ```
    When one pane's size is changed programmatically, other panes without a specified size will adjust to accommodate the change.

---
### 5. Dynamic Panes (Adding, Removing, Reordering)

* **Adding/Removing Panes**: You can dynamically add or remove panes using Svelte's `#if` or `#each` blocks. `svelte-splitpanes` will automatically adjust the layout.
    ```svelte
    <script>
      let showSecondPane = true;
    </script>
    <Button on:click={() => showSecondPane = !showSecondPane}>Toggle Pane</Button>
    <Splitpanes>
      <Pane>Pane 1</Pane>
      {#if showSecondPane}
        <Pane>Pane 2 (Toggleable)</Pane>
      {/if}
      <Pane>Pane 3</Pane>
    </Splitpanes>
    ```
* **Reordering Panes**: Use Svelte's keyed `#each` blocks for reordering panes. The library will correctly handle the changes in pane order.
    ```svelte
    <script>
      let items = [{ id: 1, content: 'Pane A' }, { id: 2, content: 'Pane B' }];
      function switchOrder() {
        items = [items[1], items[0]];
      }
    </script>
    <Button on:click={switchOrder}>Switch Panes</Button>
    <Splitpanes>
      {#each items as item (item.id)}
        <Pane>{item.content}</Pane>
      {/each}
    </Splitpanes>
    ```

---
### 6. Event Handling

`svelte-splitpanes` emits several events you can listen to:

* `ready`: Fired when Splitpanes is initialized.
* `resize`: Fired continuously while a splitter is being dragged. Returns an array of pane sizing details.
* `resized`: Fired once when dragging stops, or after panes are added/removed. Returns an array of pane sizing details.
* `pane-click`: Fired when a pane is clicked. Returns the clicked pane object.
* `pane-maximize`: Fired when a pane is maximized (e.g., by double-clicking a splitter). Returns the maximized pane object.
* `pane-add`: Fired when a pane is added. Returns details about the added pane and the new panes array.
* `pane-remove`: Fired when a pane is removed. Returns details about the removed pane and the remaining panes array.
* `splitter-click`: Fired when a splitter is clicked without dragging. Returns the next pane object.

Example:
```svelte
<Splitpanes on:resized={(event) => console.log('Resized:', event.detail)}>
  ...
</Splitpanes>
```
Check the `listen-to-events` example for a demonstration of all events.

---
### 7. Styling and Themes

* **Themes**: Use the `theme` prop on `<Splitpanes>` to apply built-in or custom themes. The default is `"default-theme"`. You can create your own by defining CSS rules for `.your-theme-name .splitpanes__splitter` and related selectors.
    * For an example of a custom theme, see `my-theme` in the styling examples.
    * The `default-theme` CSS can be found for reference but should be copied and renamed if customized to avoid conflicts.
* **CSS Overrides**: You can directly style `splitpanes__pane` and `splitpanes__splitter` classes globally or scoped with a custom class/id on the `<Splitpanes>` component.
    * Example for making splitters wider and more visible on hover:
        ```css
        .custom-splitpanes .splitpanes__splitter {
          background-color: #ccc;
          position: relative;
        }
        .custom-splitpanes .splitpanes__splitter:before { /* Hover/active area */
          content: '';
          position: absolute;
          left: -10px; /* Makes touch/hover area wider */
          right: -10px;
          top: 0;
          bottom: 0;
          background-color: rgba(0, 123, 255, 0.1);
          opacity: 0;
          transition: opacity 0.2s;
          z-index: 1;
        }
        .custom-splitpanes .splitpanes__splitter:hover:before {
          opacity: 1;
        }
        ```
    * The `app-layout` example demonstrates fixed-size panes and custom splitter appearances using CSS.

---
### 8. Advanced Features

* **Nested Splitpanes**: You can nest `<Splitpanes>` components for complex layouts.
    ```svelte
    <Splitpanes>
      <Pane>Pane 1</Pane>
      <Pane>
        <Splitpanes horizontal>
          <Pane>Nested Pane 2.1</Pane>
          <Pane>Nested Pane 2.2</Pane>
        </Splitpanes>
      </Pane>
    </Splitpanes>
    ```
* **Touch Device Support**: The library is designed to work on touch devices. Splitters have `touch-action: none;` to prevent default browser zoom on double-tap.
* **Legacy Browser Support**: Includes support for IE 11.

---
### 9. Performance and Considerations

* When adding or removing panes, `svelte-splitpanes` re-evaluates and equalizes pane sizes. This process considers given sizes, min/max constraints, and distributes space proportionally.
* For reordering, always use keyed `#each` blocks (`{#each items as item (item.id)}`) to ensure Svelte can efficiently update the DOM and `svelte-splitpanes` can track panes correctly.
