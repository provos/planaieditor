---
description:
globs: *.py
alwaysApply: false
---

# Python Backend Best Practices

## Project Structure
1. The main entry point for the backend app is in [app.py](mdc:backend/app.py)
2. The remaining python code is in backend/planaieditor/
3. Tests are in the tests/ directory

## Python Practices
1. Use type hints for everything
2. Use pytest for writing tests
3. All dependencies are managed by Poetry which is setup in the backend/ directory
4. Create flake8 and black compliant code - can we run with ```poetry run flake8``` or ```poetry run black .``` in the backend/ directory

## Flask Configuration
1. Store configurations in separate files for different environments (dev, test, prod)
2. Never hardcode sensitive values - use environment variables
3. Disable debug mode in production environments

## Pydantic Integration
1. Create Pydantic models for all API request/response schemas
2. Validate incoming request data before processing:
   ```python
   data = UserModel.model_validate(request.json)
   ```
3. Use Pydantic for configuration management where appropriate
4. Leverage Pydantic's Field constraints to enforce validation rules (min_length, regex, etc.)

## RESTful API Design
1. Use appropriate HTTP methods (GET, POST, PUT, DELETE)
2. Return proper HTTP status codes (200, 201, 400, 404, 500, etc.)
3. Design consistent URL patterns following REST principles

## Flask-SocketIO Implementation
1. Organize WebSocket events using namespaces
2. Validate all incoming socket data with Pydantic models
3. Implement proper error handling for socket events
4. Use background tasks for long-running operations to avoid blocking the event loop
5. Set appropriate ping/pong intervals to maintain connections

## Error Handling
1. Create centralized error handlers for consistent error responses
2. Log errors with sufficient context for debugging
3. Return user-friendly error messages without exposing internal details

## Testing
1. Write unit tests for individual functions and classes
2. Use pytest and its fixtures for test organization
3. Mock external services during testing

## Performance
1. Implement caching strategies using Flask-Caching
2. Set up proper WSGI server (Gunicorn) with appropriate worker configuration
3. Consider asynchronous processing for CPU-intensive tasks

## Documentation
1. Include docstrings for all functions, classes, and methods